const { ASGProduct } = require('../../models/asg/products');
const { transformedProductsByCMS } = require('../../helpers');

const getCmsProductsByArticle = async (req, res) => {
  const { article } = req.body;

  if (!article) {
    return res.status(400).json({
      status: 'ERROR',
      code: 400,
      message: '–ù–µ –ø–µ—Ä–µ–¥–∞–Ω –∞—Ä—Ç–∏–∫—É–ª',
    });
  }

  const normalizedArticle = article.trim();

  // –ò—â–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
  const products = await ASGProduct.aggregate([
    {
      $match: {
        $or: [
          { tecdoc_article: { $regex: normalizedArticle, $options: 'i' } },
          { article: { $regex: normalizedArticle, $options: 'i' } },
        ],
      },
    },
    {
      $lookup: {
        from: 'asgimages',
        localField: 'id',
        foreignField: 'product_id',
        as: 'images',
      },
    },
    {
      $addFields: {
        img: { $arrayElemAt: ['$images.images', 0] },
      },
    },
    { $unset: 'images' },

    // üî• –î–û–ë–ê–í–õ–Ø–ï–ú lookup –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    {
      $lookup: {
        from: 'asgcategories', // –∏–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        localField: 'category_id',
        foreignField: 'id', // –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é, —á—Ç–æ id –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî —ç—Ç–æ –µ—ë –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        as: 'category',
      },
    },
    {
      $addFields: {
        margin: { $ifNull: [{ $arrayElemAt: ['$category.margin', 0] }, 16] }, // –±–µ—Ä—ë–º margin –∏–ª–∏ 16, –µ—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      },
    },
    { $unset: 'category' },
  ]);

  // –¢–µ–ø–µ—Ä—å —É –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –µ—Å—Ç—å margin
  const transformedProducts = transformedProductsByCMS(products);

  res.json({
    status: 'OK',
    code: 200,
    products: transformedProducts,
  });
};

module.exports = getCmsProductsByArticle;
