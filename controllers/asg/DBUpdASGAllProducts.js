const { ASGProduct } = require('../../models/asg/products');
const { serviceASG } = require('../../helpers');
const { ASG_LOGIN, ASG_PASSWORD } = process.env;

const MAX_RETRIES = 3;
const RETRY_DELAY_MS = 2000;
const REQUEST_DELAY_MS = 1000; // –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å 429

// üîÅ –ü–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
const retryRequest = async (
  fn,
  retries = MAX_RETRIES,
  delay = RETRY_DELAY_MS,
) => {
  for (let i = 0; i < retries; i++) {
    try {
      return await fn();
    } catch (e) {
      const status = e?.response?.status;
      if (i < retries - 1 && [500, 502, 504, 429].includes(status)) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ ${status}, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${delay}–º—Å...`);
        await new Promise(r => setTimeout(r, delay));
      } else {
        throw e;
      }
    }
  }
};

// üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
const fetchBatch = async page => {
  return retryRequest(async () => {
    try {
      const res = await serviceASG.post(`/prices?page=${page}`);
      return res.data;
    } catch (e) {
      if (e?.response?.status === 401) {
        console.log('üîë –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...');
        const auth = await serviceASG.post('/auth/login', {
          login: ASG_LOGIN,
          password: ASG_PASSWORD,
        });
        serviceASG.defaults.headers.common.Authorization = `Bearer ${auth.data.access_token}`;
        const retryRes = await serviceASG.post(`/prices?page=${page}`);
        return retryRes.data;
      } else {
        throw e;
      }
    }
  });
};

// üß† –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ MongoDB
const updateDatabase = async items => {
  if (!Array.isArray(items) || items.length === 0) return;

  const bulkOps = items.map(item => {
    const searchIndex = `
      ${item.name || ''}
      ${item.description || ''}
      ${item.brand || ''}
      ${item.category || ''}
    `
      .toLowerCase()
      .replace(/[^a-z–∞-—è—ë0-9]+/gi, ' ')
      .replace(/\b(\d+w)[\s\-]?(\d+)\b/g, '$1$2')
      .trim()
      .slice(0, 500);

    return {
      updateOne: {
        filter: { id: item.id },
        update: {
          $set: {
            ...item,
            search_index: searchIndex,
          },
        },
        upsert: true,
      },
    };
  });

  await ASGProduct.bulkWrite(bulkOps, { ordered: false });
};

// üöÄ –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
const DBUpdASGAllProducts = async (req, res) => {
  console.log('üöÄ –ù–∞—á–∞—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã —Ç–æ–≤–∞—Ä–æ–≤ ASG...');
  const failedPages = [];
  const allIds = new Set();

  try {
    const first = await fetchBatch(1);
    const perPage = first.per_page || first.data.items.length;
    const totalItems = first.total || first.data.items.length;
    const totalPages = Math.ceil(totalItems / perPage);

    console.log(
      `üìÑ –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${totalPages}, —Ç–æ–≤–∞—Ä–æ–≤: ${totalItems}, –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${perPage}`,
    );

    for (let page = 1; page <= totalPages; page++) {
      try {
        const data = page === 1 ? first : await fetchBatch(page);
        const items = data?.data?.items || [];

        if (items.length > 0) {
          await updateDatabase(items);
          items.forEach(i => allIds.add(i.id));
          console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}`);
        } else {
          console.warn(`‚ö†Ô∏è –ü—É—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}`);
        }
      } catch (err) {
        const status = err?.response?.status;
        console.error(
          `‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${page}. Status: ${status}, Message: ${err.message}`,
        );
        failedPages.push(page);
      }

      // ‚è∏Ô∏è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      if (page < totalPages) {
        await new Promise(r => setTimeout(r, REQUEST_DELAY_MS));
      }
    }

    if (failedPages.length > 0) {
      console.warn(
        `‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏. –ü—Ä–æ–ø—É—â–µ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${failedPages.join(', ')}`,
      );
      res.status(207).json({
        status: 'partial',
        code: 207,
        message: '–ë–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ',
        failedPages,
      });
    } else {
      console.log('‚úÖ –í—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.');
      res.json({
        status: 'success',
        code: 200,
        message: '–ë–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
        updatedCount: allIds.size,
      });
    }
  } catch (e) {
    console.error('üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', e.message);
    res.status(500).json({
      status: 'error',
      code: 500,
      message: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π',
    });
  }
};

module.exports = DBUpdASGAllProducts;
